name: CI-CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Prisma generate
        run: npx prisma generate

      - name: Lint
        run: npm run lint --if-present

      - name: Build (tsup)
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy via SSH (git pull + build)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            REPO_URL="https://github.com/${{ github.repository }}.git"
            APP_DIR=/var/www/api-integracao-profbiodicas
            BRANCH=main
            NODE_VERSION=20
            echo "==> Deploy starting (repo: $REPO_URL)"
            # Prepare directory
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "Clonando repositório..."
              sudo mkdir -p "$APP_DIR"
              sudo chown -R $USER:$USER "$APP_DIR"
              git clone --branch "$BRANCH" --depth 1 "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR"
            echo "==> Fetch & reset"
            git fetch origin "$BRANCH" --depth 1
            git reset --hard "origin/$BRANCH"
            echo "Commit atual: $(git rev-parse --short HEAD)"

            # Ensure .env exists (we don't overwrite)
            if [ ! -f .env ]; then
              echo "[WARN] .env não existe! Crie baseado em .env.example antes do próximo deploy." >&2
              exit 1
            fi

            # Node setup (use nvm if available)
            if command -v nvm >/dev/null 2>&1; then
              echo "Usando nvm"
              . "$HOME/.nvm/nvm.sh"
              nvm install $NODE_VERSION
              nvm use $NODE_VERSION
            else
              if ! command -v node >/dev/null 2>&1; then
                echo "Instalando Node.js via apt (requer sudo)"
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                sudo apt-get install -y nodejs build-essential
              fi
            fi

            echo "Node: $(node -v)"
            echo "NPM:  $(npm -v)"

            echo "==> Instalando dependências"
            npm install --no-audit --no-fund

            echo "==> Prisma generate & migrate"
            npx prisma generate
            npx prisma migrate deploy

            echo "==> Build"
            npm run build

            # PM2 setup
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "Instalando PM2 global"
              npm install -g pm2
            fi

            # Ecosystem file (only create if absent)
            if [ ! -f ecosystem.config.js ]; then
              cat > ecosystem.config.js <<'EOF'
            module.exports = {
              apps: [
                {
                  name: 'api-integracao-profbiodicas',
                  script: 'build/server.js',
                  instances: 1,
                  exec_mode: 'fork',
                  env: {
                    NODE_ENV: 'production'
                  }
                }
              ]
            }
            EOF
            fi

            echo "==> Start/Reload PM2"
            pm2 startOrReload ecosystem.config.js --update-env
            pm2 save

            echo "==> Limpeza de caches antigos (npm)"
            npm cache clean --force >/dev/null 2>&1 || true

            echo "==> Deploy finalizado com sucesso"

      - name: PM2 Status
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            pm2 list || echo "PM2 não instalado"

    # Secrets necessários:
    # VPS_HOST, VPS_USER, VPS_SSH_KEY, (VPS_PORT opcional)
